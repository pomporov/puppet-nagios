#!/bin/sh
#
# check_moxi for Nagios.
# Plugin to check that a moxi memcache proxy connection is alive.
#

PROGPATH=`dirname $0`

. $PROGPATH/utils.sh

print_usage() {
    echo "Usage: check_moxi [OPTIONS]...
Checks moxi status for nagios integration.

Mandatory arguments to long options are mandatory for short options too.
  -h, --help
  -s, --socket=FILE     UNIX socket to use to connect to moxi. Default: off
  -H, --host=HOST       Connection hostname or IP address. Default: 127.0.0.1
  -p, --port=PORT       TCP port to use to connect to moxi. Default: 11211
  -S, --stats           Use simple STATS command instead of key SET+GET

Examples:
  check_moxi -s /opt/moxi/moxi.sock
  check_moxi -p 11219
  check_moxi -S
"
}

# Defaults.
exitstatus=$STATE_UNKNOWN
socket=
host="127.0.0.1"
port="11211"
stats_enabled=false

# Specify a key and a random value to set
value_length=10
key="check_moxi_nagios_${HOSTNAME}"
value=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w $value_length | head -n 1)

# Grab the command line arguments.
while test -n "$1"; do
    case "$1" in
        --help|-h)
            print_usage
            exit $STATE_OK
            ;;
        --socket|-s)
            socket=$2
            shift
            ;;
        --host|-H)
            host=$2
            shift
            ;;
        --port|-p)
            port=$2
            shift
            ;;
        --stats|-S)
            stats_enabled=true
            ;;
        *)
            echo "Unknown argument: $1"
            print_usage
            exit $STATE_UNKNOWN
            ;;
    esac
    shift
done

# If we are here, make sure CRITICAL is the default
exitstatus=$STATE_CRITICAL

# If a socket is given, use that and ignore host/port
if [ -n "$socket" ]; then
    # sanity check
    which socat >/dev/null || message="socat not found. "
    # socat check
    if [ $stats_enabled = false ]; then
      # key SET and GET method
      message="${message}SET and GET key via ${socket}"
      printf "set ${key} 0 15 ${value_length}\r\n${value}\r\n" | socat - UNIX-CONNECT:${socket} &>/dev/null
      RESULT=$(echo "get ${key}" | socat - UNIX-CONNECT:${socket} 2> /dev/null | grep -v '^VALUE\|^END$')
      RETVAL=$?
    else
      # STATS method
      message="${message}Socket ${socket}"
      STATS="`echo 'stats' | socat - UNIX-CONNECT:${socket} 2>/dev/null`"
      RETVAL=$?
    fi
else
    # nc check
    if [ $stats_enabled = false ]; then
      # key SET and GET method
      message="${message}SET and GET key via ${host}:${port}"
      printf "set ${key} 0 15 ${value_lemgth}\r\n${value}\r\n" | nc ${host} ${port} &>/dev/null
      RESULT=$(echo "get ${key}" | nc ${host} ${port} 2> /dev/null | grep -v '^VALUE\|^END$')
      RETVAL=$?
    else
      # STATS method
      message="TCP ${host}:${port}"
      STATS="`echo 'stats' | nc ${host} ${port} 2>/dev/null`"
      RETVAL=$?
    fi
fi

if [ $stats_enabled = false ]; then
  if [ $RETVAL -eq 0 -a "${RESULT:0:$value_length}" == "${value}" ]; then
    exitmessage="OK: ${message} were successful."
    exitstatus=$STATE_OK
  else
    exitmessage="CRITICAL: ${message} were not successful."
  fi
else
  if [ $RETVAL -eq 0 -a "${STATS:0:5}" == "STAT " ]; then
      exitmessage="OK: ${message} returning stats."
      exitstatus=$STATE_OK
  else
      exitmessage="CRITICAL: ${message} not returning stats."
  fi
fi

echo $exitmessage
exit $exitstatus

